{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "SigueCloudFormationEC2Deploymentv1 Sige - Template - Created by: Gabriel Sandoval - This will deploy an EC2 instance into it's proper tier",
	"Parameters": {
		"KeyName": {
			"Description": "AWS key",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"InstanceType": {
			"Description": "Amazon EC2 instance type",
			"Type": "String",
			"Default": "m4.large",
			"AllowedValues": [
				"t1.micro",
				"t2.micro",
				"t2.small",
				"t2.medium",
				"m4.small",
				"m4.medium",
				"m4.large",
				"m4.xlarge",
				"m2.xlarge",
				"m2.2xlarge",
				"m2.4xlarge",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"c4.medium",
				"c4.xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"g2.2xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge",
				"i2.xlarge",
				"i2.2xlarge",
				"i2.4xlarge",
				"i2.8xlarge",
				"hi1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"SecurityGroup": {
			"Type": "List<AWS::EC2::SecurityGroup::Id>",
			"Description": "The SecurityGroups Needed for Web server in an AutoScalingGroup",
			"ConstraintDescription": "Select the SecurityGroups from the drop down"
		},
		"DomainDNSName": {
			"Description": "Fully qualified domain name (FQDN) of the forest root domain e.g. corp.example.com",
			"Type": "String",
			"AllowedValues": [
				"dev.local",
				"prod.local",
				"test.local",
				"USEYOUROWN.local"
			],
			"MinLength": "3",
			"MaxLength": "25"
		},
		"DomainControllerPrivateIP": {
			"Description": "10.1.100.26 10.1.100.29 is sigue.local 10.65.52.40 is dev.sigue.local 10.129.50.40 is prod.sigue.local 10.65.54.40 is test",
			"Type": "String",
			"AllowedValues": [
				"10.1.x.x",
				"10.x..x.x",
				"10.x.x.x.",
				"10.x.x.x",
				"10.x.x.x"
			]
		},
		"OctopusRole": {
			"Type": "String",
			"Description": "The Octopus role to assign resources.",
			"AllowedValues": [
				"YOUROWNOCTOROLE"
			]
		},
		"OctopusEnvironment": {
			"Type": "String",
			"Description": "The Octopus environment to assign resources.",
			"AllowedValues": [
				"YOUROWNOCTOENV"
			]
		},
		"OctopusServerThumbprint": {
			"Type": "String",
			"Description": "The Octopus Server Thumbprint to assign resources.",
			"AllowedValues": [
				"USE_YOUR_OWN_THUMBPRINT"
			]
		},
		"DomainNetBIOSName": {
			"Description": "NetBIOS name of the domain (upto 15 characters) for users of earlier versions of Windows e.g. CORP",
			"Type": "String",
			"AllowedValues": [
				"Test",
				"YOUROWN.local"
			],
			"MinLength": "1",
			"MaxLength": "15",
			"AllowedPattern": "[a-zA-Z0-9]+",
			"ConstraintDescription": "must be a valid NetBIOS name."
		},
		"WindowsServerVersion": {
			"Description": "Windows Server Version",
			"Type": "String",
			"AllowedValues": [
				"Windows2012r2"
			],
			"ConstraintDescription": "Type Windows2012r2 or Windows2008r2"
		},
		"DomainAdminPassword": {
			"Description": "Password for the Domain Administrator account to join to the domain",
			"Type": "String",
			"MinLength": "5",
			"MaxLength": "32",
			"AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
			"NoEcho": "True",
			"ConstraintDescription": "must be a valid password."
		},
		"DomainAdminUser": {
			"Description": "Username for the Domain Administrator account to join to the domain",
			"Type": "String",
			"AllowedValues": [
				"cloudformation"
			],
			"AllowedPattern": "[a-zA-Z0-9]+",
			"ConstraintDescription": "must be a valid username."
		},
		"VpcId": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "VpcId of your existing Virtual Private Cloud (VPC)",
			"ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
		},
		"OperatorEMail": {
			"Description": "EMail address to notify if there are any scaling operations",
			"Type": "String",
			"AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
			"ConstraintDescription": "must be a valid email address."
		},
		"Subnets": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
			"ConstraintDescription": "must be a list of an existing subnets in the selected Virtual Private Cloud."
		},
		"WaitConditionTimeout": {
			"Description": "Number of seconds you want cloudformation to wait for the Server to completely Join (1 Server usually takes 1500 Seconds to develop)",
			"Type": "String",
			"AllowedValues": [
				"1500",
				"2500",
				"9500"
			],
			"AllowedPattern": "[0-9]*",
			"ConstraintDescription": "must be a number between a numeric value."
		}
	},
	"Mappings": {
		"AWSRegion2AMI": {
			"us-east-1": {
				"Windows2012r2": "ami-XXXXXX"
			}
		}
	},
	"Resources": {
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					"allow-all-ssm"
				]
			}
		},
		"NotificationTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"Subscription": [
					{
						"Endpoint": {
							"Ref": "OperatorEMail"
						},
						"Protocol": "email"
					}
				]
			}
		},

		"CPUAlarmHigh": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Alarm if CPU > 90% for 10 minutes",
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Average",
				"Period": "300",
				"EvaluationPeriods": "2",
				"Threshold": "90",
				"AlarmActions": [
					{
						"Ref": "NotificationTopic"
					}
				],
				"Dimensions": [
					{
						"Name": "InstanceId",
						"Value": {
							"Ref": "MyInstance"
						}
					}
				]
			}
		},

		"MyInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"files": {
							"c:\\cfn\\cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[main]\n",
											"stack=",
											{
												"Ref": "AWS::StackId"
											},
											"\n",
											"region=",
											{
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.MyInstance.Metadata.AWS::CloudFormation::Init\n",
											"action=cfn-init.exe",
											"       --stack ",
											{
												"Ref": "AWS::StackId"
											},
											"       --resource MyInstance",
											"       --region ",
											{
												"Ref": "AWS::Region"
											},
											"--http-proxy=10.1.100.195:3228\n",
											"\n"
										]
									]
								}
							},
							"C:\\cfn\\Joindomain.ps1": {
								"content": {
									"Fn::Join": [
										"",
										[
											"$wmi = Get-WmiObject win32_networkadapterconfiguration -filter \"ipenabled = 'true'\"\n",
											"$wmi.SetDNSServerSearchOrder(\"",
											{
												"Ref": "DomainControllerPrivateIP"
											},
											"\")\n",
											"$password = \"",
											{
												"Ref": "DomainAdminPassword"
											},
											"\" | ConvertTo-SecureString -asPlainText -Force\n",
											"$username = \"",
											{
												"Ref": "DomainNetBIOSName"
											},
											"\\",
											{
												"Ref": "DomainAdminUser"
											},
											"\"\n",
											"$credential = New-Object System.Management.Automation.PSCredential($username,$password)\n",
											"Add-Computer -domainname ",
											{
												"Ref": "DomainDNSName"
											},
											" -Credential $credential -passthru -restart\n"
										]
									]
								}
							},
							"C:\\cfn\\octopustentacle.ps1": {
								"content": {
									"Fn::Join": [
										"",
										[
											"Start-Transcript -path \"E:\\Octopus\\TentacleInstallLog.txt\"",
											"\n",
											"$tentacleDownloadPath = \"https://download.octopusdeploy.com/octopus/Octopus.Tentacle.3.3.3-x64.msi\"",
											"\n",
											"$yourApiKey = \"API-USE_YOUR_OWN_API\"",
											"\n",
											"$octopusServerUrl = \"http://USE_YOUR_OWN_IP_ADDRESS"",
											"\n",
											"$registerInEnvironments = \"YOUR_OWN_ENV\"",
											"\n",
											"$registerInRoles = \"YOUR_OWN_Roles\"",
											"\n",
											"$octopusServerThumbprint = \"USE_YOUR_OWN_THUMBPRINT\"",
											"\n",
											"$tentacleListenPort = 10933\n",
											"$tentacleHomeDirectory = \"E:\\Octopus\"",
											"\n",
											"$tentacleAppDirectory = \"E:\\Octopus\\Applications\"",
											"\n",
											"$tentacleConfigFile = \"E:\\Octopus\\Tentacle\\Tentacle.config\"",
											"\n",
											"function Download-File\n",
											"{\n",
											"param ( \n",
											"[string] $url,\n",
											"[string] $saveAs \n",
											")\n",
											"Write-Host \"Downloading\" $url to $saveAs\n",
											"[System.Net.ServicePointManager]::Expect100Continue = $true;\n",
											"[System.Net.ServicePointManager]::SecurityProtocol = `\n",
											"[System.Net.SecurityProtocolType]::Ssl3 -bor `\n",
											"[System.Net.SecurityProtocolType]::Tls -bor `\n",
											"[System.Net.SecurityProtocolType]::Tls11 -bor `\n",
											"[System.Net.SecurityProtocolType]::Tls12\n",
											"$downloader = new-object System.Net.WebClient\n",
											"$downloader.DownloadFile($url, $saveAs)\n",
											"}\n",
											"function Get-MyPublicIPAddress \n",
											"{\n",
											"Write-Host \"Getting public IP address\"\n",
											"$ip = Invoke-RestMethod http://169.254.169.254/latest/meta-data/local-ipv4/ \n",
											"return $ip \n",
											"}\n",
											"function Install-Tentacle \n",
											"{\n",
											"param (\n",
											"[Parameter(Mandatory =$True)]\n",
											"[string]$apiKey,\n",
											"[Parameter(Mandatory =$True)]\n",
											"[System.Uri]$octopusServerUrl,\n",
											"[Parameter(Mandatory =$True)]\n",
											"[string]$environment,\n",
											"[Parameter(Mandatory =$True)]\n",
											"[string]$role\n",
											")\n",
											"Write-Output \"Beginning Tentacle installation\"\n",
											"Write-Output \"Downloading latest Octopus Tentacle MSI...\"\n",
											"$tentaclePath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(\"\\Tentacle.msi\")\n",
											"if ((test-path $tentaclePath) -ne $true) {\n",
											"Download-File $tentacleDownloadPath $tentaclePath",
											"\n",
											"} \n",
											"Write-Output \"Installing MSI\"\n",
											"$msiExitCode = (Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/i C:\\Tentacle.msi /quiet\" -Wait -Passthru).ExitCode\n",
											"Write-Output \"Tentacle MSI installer returned exit code $msiExitCode\"\n",
											"if ($msiExitCode -ne 0) {\n",
											"throw \"Installation aborted\"\n",
											"} \n",
											"Write-Output \"Open port \"Inbound TCP/10933\" on Windows Firewall\"\n",
											"& netsh.exe advfirewall firewall add rule name=\"Inbound TCP/10933\" dir=in action=allow protocol=TCP localport=10933",
											"\n",
											"if ($lastExitCode -ne 0) {\n",
											"throw \"Installation failed when modifying firewall rules\" \n",
											"} \n",
											"$ipAddress = Get-MyPublicIPAddress\n",
											"$ipAddress = $ipAddress.Trim()",
											"\n",
											"Write-Output \"Public IP address: \" + $ipAddress\n",
											"Write-Output \"Configuring and registering Tentacle\"\n",
											"cd \"${env:ProgramW6432}\\Octopus Deploy\\Tentacle\"\n",
											"& .\\tentacle.exe create-instance --instance \"Tentacle\" --config $tentacleConfigFile --console | Write-Host\n",
											"if ($lastExitCode -ne 0) {\n",
											"throw \"Installation failed on create-instance\"\n",
											"} \n",
											"& .\\tentacle.exe configure --instance \"Tentacle\" --home $tentacleHomeDirectory --console | Write-Host\n",
											"if ($lastExitCode -ne 0) {\n",
											"throw \"Installation failed on configure\"\n",
											"} \n",
											"& .\\tentacle.exe configure --instance \"Tentacle\" --app $tentacleAppDirectory --console | Write-Host\n",
											"if ($lastExitCode -ne 0) {\n",
											"throw \"Installation failed on configure\"\n",
											"} \n",
											"& .\\tentacle.exe configure --instance \"Tentacle\" --port $tentacleListenPort --console | Write-Host\n",
											"if ($lastExitCode -ne 0) {\n",
											"throw \"Installation failed on configure\"\n",
											"} \n",
											"& .\\tentacle.exe new-certificate --instance \"Tentacle\" --console | Write-Host\n",
											"if ($lastExitCode -ne 0) {\n",
											"throw \"Installation failed on creating new certificate\"\n",
											"} \n",
											"& .\\tentacle.exe configure --instance \"Tentacle\" --trust $octopusServerThumbprint --console | Write-Host\n",
											"if ($lastExitCode -ne 0) {\n",
											"throw \"Installation failed on configure\"\n",
											"} \n",
											"& .\\tentacle.exe register-with --instance \"Tentacle\" --server $octopusServerUrl --environment $environment --role $role --name $env:COMPUTERNAME --publicHostName $ipAddress --apiKey $apiKey --comms-style TentaclePassive --force --console | Write-Host\n",
											"if ($lastExitCode -ne 0) {\n",
											"throw \"Installation failed on register-with\"\n",
											"} \n",
											"& .\\tentacle.exe service --instance \"Tentacle\" --install --start --console | Write-Host\n",
											"if ($lastExitCode -ne 0) {\n",
											"throw \"Installation failed on service install\"\n",
											"} \n",
											"Write-Output \"Tentacle commands complete\"\n",
											"} \n",
											"Install-Tentacle -apikey $yourApiKey -octopusServerUrl $octopusServerUrl -environment $registerInEnvironments -role $registerInRoles\n"
										]
									]
								}
							}
						},
						"commands": {
							"1-run-changecomputer": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe $instanceid=Invoke-RestMethod http://169.254.169.254/latest/meta-data/instance-id; Rename-Computer -NewName $instanceid -Restart -Force"
										]
									]
								},
								"waitAfterCompletion": "forever"
							},
							"2-run-enablepsexec": {
								"command": "powershell.exe Set-ExecutionPolicy Unrestricted"
							},
							"3-run-joincomputer": {
								"command": "powershell.exe c:\\cfn\\Joindomain.ps1",
								"waitAfterCompletion": "forever"
							},
							"4-run-octopustentacle": {
								"command": "powershell.exe c:\\cfn\\octopustentacle.ps1"
							},
							"5-signal-success": {
								"command": {
									"Fn::Join": [
										"",
										[
											"cfn-signal.exe -e 0 \"",
											{
												"Fn::Base64": {
													"Ref": "MemberWaitHandle"
												}
											},
											"\""
										]
									]
								}
							}
						},
						"services": {
							"windows": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"c:\\cfn\\cfn-hup.conf",
										"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"KeyName": {
					"Ref": "KeyName"
				},
				"ImageId": {
					"Fn::FindInMap": [
						"AWSRegion2AMI",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "WindowsServerVersion"
						}
					]
				},
				"IamInstanceProfile" : {
					"Ref" : "InstanceProfile"
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"SubnetId": {
					"Ref": "Subnets"
				},
				"SecurityGroupIds": {
					"Ref": "SecurityGroup"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"<script>\n",
								"cfn-init.exe ",
								"       --stack ",
								{
									"Ref": "AWS::StackId"
								},
								"       --resource MyInstance ",
								"       --region ",
								{
									"Ref": "AWS::Region"
								},
								" --http-proxy=10.1.100.195:3228\n",
								"</script>"
							]
						]
					}
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}
				]
			}
		},
		"myWaitCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"DependsOn": "MyInstance",
			"Properties": {
				"Handle": {
					"Ref": "MemberWaitHandle"
				},
				"Timeout": {
					"Ref": "WaitConditionTimeout"
				}
			}
		},
		"MemberWaitHandle": {
			"Type": "AWS::CloudFormation::WaitConditionHandle",
			"Properties": {}
		}
	},
	"Outputs": {
		"VpcId": {
			"Description": "The ID of the VPC",
			"Value": {
				"Ref": "VpcId"
			}
		}
	}
}
